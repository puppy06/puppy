#BlueJ class context
comment0.target=Vehicle
comment0.text=\r\n\ This\ is\ the\ superclass\ for\ Vehicles.\r\n\ \r\n
comment1.params=
comment1.target=boolean\ checkHitPedestrian()
comment10.params=
comment10.target=double\ getSpeed()
comment10.text=\r\n\ An\ accessor\ that\ can\ be\ used\ to\ get\ this\ Vehicle's\ speed.\ Used,\ for\ example,\ when\ a\ vehicle\ wants\ to\ see\r\n\ if\ a\ faster\ vehicle\ is\ ahead\ in\ the\ lane.\r\n
comment11.params=speed
comment11.target=void\ setSpeed(double)
comment2.params=origin
comment2.target=Vehicle(VehicleSpawner)
comment3.params=w
comment3.target=void\ addedToWorld(greenfoot.World)
comment4.params=
comment4.target=boolean\ checkEdge()
comment4.text=\r\n\ A\ method\ used\ by\ all\ Vehicles\ to\ check\ if\ they\ are\ at\ the\ edge.\r\n\ \r\n\ Note\ that\ this\ World\ is\ set\ to\ unbounded\ (The\ World's\ super\ class\ is\ (int,\ int,\ int,\ FALSE)\ which\ means\r\n\ that\ objects\ should\ not\ be\ stopped\ from\ leaving\ the\ World.\ However,\ this\ introduces\ a\ challenge\ as\ there\r\n\ is\ the\ potential\ for\ objects\ to\ disappear\ off-screen\ but\ still\ be\ fully\ acting\ and\ thus\ wasting\ resources\r\n\ and\ affecting\ the\ simulation\ even\ though\ they\ are\ not\ visible.\r\n
comment5.params=
comment5.target=void\ drive()
comment5.text=\r\n\ Method\ that\ deals\ with\ movement.\ Speed\ can\ be\ set\ by\ individual\ subclasses\ in\ their\ constructors\r\n
comment6.params=y
comment6.target=int\ getCurrentVehicleLane(int)
comment6.text=\ Method\ get\ current\ lane\ number\ of\ vehicle\r\n\ \ @param\ y\ -\ the\ y\ position\ of\ the\ lane\ the\ Vehicle\ is\ in\r\n\ @return\ int\ the\ lane\ number,\ zero-indexed\r\n
comment7.params=
comment7.target=void\ checkPoliceCarBack()
comment7.text=\r\n\ Method\ to\ check\ if\ a\ Police\ car\ is\ behind\ the\ vehicle.\ If\ yes,\ then\ vehicle\ will\ switch\ lanes\ \r\n
comment8.params=
comment8.target=int\ getLaneDifference()
comment8.text=\r\n\ \ Method\ get\ Lane\ width;\r\n\ @return\ int\ difference\ between\ two\ neigbour\ lanes\r\n
comment9.params=
comment9.target=void\ changeLane()
comment9.text=\r\n\ Method\ that\ deals\ with\ change\ line.\r\n\ First\ find\ current\ lane\ of\ vehicle\ and\ each\ lane's\ space,\ then\ check\ if\ ahead\ has\ vehicle\ or\ not\r\n\ If\ the\ vehicle\ ahead\ is\ not\ null,\ then\ check\ if\ its\ neighbour\ lanes\ has\ a\ vehicle\ or\ not,\ if\ not\ then\ change\ lanes\r\n\ Order\ of\ checking\ neighboring\ lanes\:\ If\ down\ lane\:\ ahead,\ down\ and\ back\ are\ not\ null,\ change\ to\ the\ down\ line,\ otherwise\ check\ upper\ line,\ if\ ahead\ and\ back\r\n\ are\ null\ which\ means\ the\ upper\ lane\ is\ clear,\ then\ change\ to\ the\ upper\ lane.\ \r\n\ If\ lane\ number\ is\ 0(first\ lane)\ check\ only\ if\ its\ bottom\ lane\ is\ clear\r\n\ If\ lane\ number\ is\ 5(last\ lane)\ check\ only\ if\ its\ top\ lane\ is\ clear\r\n
numComments=12
